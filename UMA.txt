Resource owners configure authorization servers with access policies that serve as asynchronous authorization grants.

-----Terminology-----
protection API token (PAT): An OAuth access token with the scope uma_protection, used by the resource server at the protection API, consisting of the resource set registration, permission registration, and token introspection endpoints.
resource set registration endpoint: An endpoint at the authorization server that allows the resource server to register resource sets.
permission registration endpoint: An endpoint at the authorization server that allows the resource server to request permission tickets.
token introspection endpoint: An endpoint at the authorization server that allows the resource server to query the status of an RPT and its associated authorization data.

authorization API token (AAT): An OAuth access token with the scope uma_authorization, used by the client at the authorization API, consisting of the RPT endpoint.
RPT endpoint: An endpoint at the authorization server that issues RPTs and authorization data to the client.
requesting party token (RPT): An UMA access token associated with a set of authorization data, used by the client to gain access to protected resources at the resource server.
authorization data: Data associated with an RPT that enables some combination of the authorization server and resource server to determine the correct extent of access to allow to a client.

subject: requesting party
verbs: one or more scopes of access
object: resource set

-----Authorization Server Configuration Data-----
GET .well-known/uma-configuration

version: "1.0"
issuer: authorization server
pat_profiles_supported: OAuth access token types supported by this authorization server for PAT issuance, "bearer".
aat_profiles_supported: OAuth access token types supported by this authorization server for AAT issuance, "bearer".
rpt_profiles_supported: Profiles supported by this authorization server for RPT issuance. 
pat_grant_types_supported: OAuth grant types supported by this authorization server in issuing PATs, authorization_code.
aat_grant_types_supported: OAuth grant types supported by this authorization server in issuing AATs, authorization_code.
claim_token_profiles_supported
uma_profiles_supported
dynamic_client_endpoint: The endpoint to use for performing dynamic client registration
token_endpoint: A requested scope of uma_protection results in a PAT. A requested scope of uma_authorization results in an AAT. 
authorization_endpoint
introspection_endpoint: The endpoint URI at which the resource server introspects an RPT presented to it by a client
resource_set_registration_endpoint: The endpoint URI at which the resource server registers resource sets to put them under authorization manager protection. 
permission_registration_endpoint: The endpoint URI at which the resource server registers a requested permission that would suffice for a client's access attempt. 
rpt_endpoint: The endpoint URI at which the client asks for authorization data. 


-----Protecting a Resource-----
1. resource owner introduces the authorization server uri to the resource server.
2. The authorization server issues client credentials to the resource server through OpenID Discovery and Dynamic Registration.
3. The resource server acquires a PAT from the authorization server.
4. resource server registers any resource sets with the authorization server using the resource set registration endpoint of the protection API.

-----Getting Authorization and Accessing a Resource-----
1. Client Request to Resource Server With No RPT
2. Resource server uses the POST method at the permission registration endpoint.
3. Authorization Server Response to Resource Server on Permission Registration Success with a permission ticket.
4. Resource Server Response to Client on Permission Registration Success with the issuer URI from the authorization server's configuration data and the just-received permission ticket.
5. Client discovers the authorization server's configuration data and endpoints using OpenID Connect Discovery.
6. Client obtain OAuth client credentials through dynamically register with the authorization server using OpenID Connect Dynamic Registration.
7. Client acquire an AAT from the authorization server.
8. Client performs a POST on the RPT endpoint, supplying its own AAT and permission ticket.
9. Authorization Server Response to Client on Authorization Success containing the RPT.
10. Client Request to Resource Server With RPT.
11. Resource Server Determines RPT Status by using the OAuth token introspection endpoint of the protection API. Resource server provides resource-owner context to the authorization server，The authorization server responds with a JSON object。
12. Resource Server Response to Client with the protected resource.












