------Client Registration------
Specify the client type
confidential - a confidential server-based component
public - a public browser-based component

The authorization server issues the registered client a client identifier -- a unique string
client identifier string size is left undefined.

Confidential clients are typically issued (or establish) a set of client credentials

The client identifier and password are encoded using the "application/x-www-form-urlencoded"
HTTP Basic authentication scheme for authenticating clients.
client credentials parameters can only be transmitted in the request-body.
authorization server MUST require the use of TLS.

provide its client redirection URIs
include any other information required by the authorization server(application name, redirect uri)


------Protocol Endpoints------
Authorization endpoint:
authorization server MUST first verify the identity of the resource owner, SHOULD require the use of TLS.
response_type MUST be one of "code" for requesting an authorization code, "token" for requesting an access token or a registered extension value.
If an authorization request is missing the "response_type" parameter, or if the response type is not understood, the authorization server MUST return an error response

client's redirection endpoint previously established during the client registration process or when making the authorization request, MUST be an absolute URI.
Lack of a redirection URI registration requirement can enable an attacker to use the authorization endpoint

If multiple redirection URIs have been registered, if only part of the redirection URI has been registered, or if no redirection URI has been registered, the client MUST include a redirection URI with the authorization request using the "redirect_uri" request parameter.
If an authorization request fails validation, authorization server SHOULD inform the resource owner

Token endpoint:
client MUST use the HTTP "POST" method when making access token requests.
A client MAY use the "client_id" "authorization_code" "grant_type" request parameter

Authorization grant types:
Authorization Code Grant page-24
maximum authorization code lifetime of 10 minutes
The client MUST NOT use the authorization code more than once.

Access Token Successful Response
parameters are included in the entity-body of the HTTP response using the "application/json"
Cache-Control: no-store
Pragma: no-cache
	 
authorization server MUST require public clients and SHOULD require confidential clients to register their redirection URIs.	 
	 
Redirection endpoint


------Token Introspection Profile------
If the authorization server supports the OAuth Introspection specification, the resource server can talk to the introspection endpoint and finds out whether the token is active or not and also what scopes are associated with the token.
The Token Introspection profile for OAuth 2.0 proposing a standard API to be exposed by the authorization server, allowing the resource server to talk to it and retrieve token metadata.

Request:
POST /introspection HTTP/1.1
token: The value of the access_token or the refresh_token
token_type_hint: The type of the token (either the access_token or the refresh_token)
resource_id: An identifier that represents the corresponding resource for introspection

Response:
active: Indicates whether the token is active. To be active, the token should not be expired or revoked. The authorization server can define its own criteria for how to define active.
client_id: The identifier of the client to which the token was issued.
scope: Approved scopes associated with the token.
sub: The subject identifier of the user who approved the authorization grant.
aud: The allowed audience for the token.


------Assertion Framework & JWT Profile------
Full clients and direct access clients MUST authenticate to the authorization server's token endpoint using a JWT assertion.
An assertion is a package of information that allows identity and security information to be shared across security domains.

Issuer: the entity that creates and signs or integrity-protects the assertion.
Relying Party: the entity that consumes the assertion and relies on its information.

client obtains the assertion patterns:
1. Assertion Created by Third Party
2. Self-Issued Assertion

assertions type:
1. Bearer Assertions: access to the associated resources without demonstrating possession of a cryptographic key.
2. Holder-of-Key Assertions: the entity presenting the assertion must demonstrate possession of additional cryptographic material.

Using JWTs as client credentials for Client Authentication:
1. client_assertion_type: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
2. client_assertion: the assertion contains a single JWT being used to authenticate the client

JWT Assertion Format: MUST be digitally signed or have a MAC applied
1. iss: a unique identifier for the entity that issued the JWT assertion; client_id for self-issued assertions.
2. sub: a unique identifier for the principal that is the subject of the JWT assertion, client_id when using assertions for client authentication.
3. aud: a value that identifies the authorization server as an intended audience.
4. exp: limits the time window during which the JWT assertion can be used.
5. nbf(not before): identifies the time before which the token MUST NOT be accepted for processing.
4. iat: the time at which the JWT assertion was issued.
6. jti(JWT ID): a unique identifier for the token.

QUESTIONS: 
1. how is a JWTs generated?  --JWT
2. when does JWTs generated?	--before request token endpoint




