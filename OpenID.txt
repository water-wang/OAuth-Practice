Requested by Clients by including the openid scope value in the Authorization Request.
Information about the authentication performed is returned in a JSON Web Token (JWT) [JWT] called an ID Token
OAuth 2.0 Authentication Servers implementing OpenID Connect are also referred to as OpenID Providers (OPs).
OAuth 2.0 Clients using OpenID Connect are also referred to as Relying Parties (RPs).

OpenID Connect performs authentication to log in the End-User or to determine that the End-User is already logged in.



------OpenID Connect Core------
With OpenID, you maintain your profile only at your OpenID provider, and all the other sites become OpenID relying parties. These “talk” with your OpenID provider to obtain your information.

OpenID flow:
1. user types his or her OpenID on the relying party web site. An OpenID is a unique URL.
2. relying party do a discovery based on it to find out the corresponding OpenID provider.
3. relying party create an association with the OpenID provider with a shared secret key.
4. user is redirected to the discovered OpenID provider.
5. user has to authenticate and approve the attribute request from the relying party.

OpenID Connect defines two ways to request user attributes. 
1. The client application use the initial OpenID Connect authentication request to request attributes, include the requested claims in the claims parameter as a JSON message.
https://localhost:9443/oauth2/authorize?
        response_type=code&
        scope=openid&
        client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya&
        redirect_uri=https://localhost/callback&
        claims={ "id_token":
                            {
                               "email": {"essential": true},
                               "given_name": {"essential": true},
                            }
               }

2. Later talk to a UserInfo endpoint hosted by the authorization server. 
there are two ways to get user attributes from the UserInfo endpoint. 
-1.defines four scope values to request attributes: profile, email, address, and phone.
https://localhost:9443/oauth2/authorize?
        response_type=code&
        scope=openid phone email&
        client_id=NJ0LXcfdOW20EvD6DU0l0p01u_Ya&
        redirect_uri=https://localhost/callback
		
GET /userinfo HTTP/1.1
Host: auth.server.com
Authorization: Bearer SJHkhew870hooi90

HTTP/1.1 200 OK
Content-Type: application/json

  {
   "phone": "94712841302",
   "email": "joe@authserver.com",
  }

-2. retrieve user attributes from the UserInfo endpoint is through the claims parameter. 
POST /userinfo HTTP/1.1
Host: auth.server.com
Authorization: Bearer SJHkhew870hooi90

claims={ "userinfo":
                    {
                       "email": {"essential": true}
                    }
       }

Using the claims parameter is the only way to request Claims outside the standard set.

Aggregated Claims are asserted by a Claims Provider other than the OpenID Provider but are returned by OpenID Provider.
Distributed Claims are asserted by a Claims Provider other than the OpenID Provider but are returned as references by the OpenID Provider.

The sub (subject) and iss (issuer) Claims, used together, are the only Claims that an RP can rely upon as a stable identifier for the End-User



------OpenID Connect Discovery------
OpenID Connect uses WebFinger to locate the OpenID Provider for an End-User.

OpenID Provider Issuer discovery: 
determinthe location of the OpenID Provider.
GET /.well-known/webfinger
Request: resource, host, rel(http://openid.net/specs/connect/1.0/issuer)
Response: links array element with href and rel

The purpose of Identifier normalization:
determine normalized Resource and Host values from the user input Identifier. 
The user input Identifier SHOULD be a URL or URI relative reference.

User Input using E-Mail Address
User Input using URL
User Input using Hostname and Port
User Input using "acct" URI Syntax

OpenID Provider Metadata:
issuer
authorization_endpoint
token_endpoint
userinfo_endpoint
jwks_uri
registration_endpoint
scopes_supported
response_types_supported: Dynamic OpenID Providers MUST support the code, id_token, and the token id_token Response Type values
response_modes_supported: the default for Dynamic OpenID Providers is ["query", "fragment"]
grant_types_supported: Dynamic OpenID Providers MUST support the authorization_code and implicit Grant Type values
acr_values_supported
subject_types_supported: include pairwise and public
token_endpoint_auth_methods_supported: JSON array containing a list of Client Authentication methods supported by this Token Endpoint.The options are client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt
claim_types_supported: Values defined by this specification are normal, aggregated, and distributed.
claims_supported: JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for.
claims_parameter_supported: Boolean value specifying whether the OP supports use of the claims parameter
request_parameter_supported: Boolean value specifying whether the OP supports use of the request parameter
request_uri_parameter_supported: Boolean value specifying whether the OP supports use of the request_uri parameter
require_request_uri_registration: Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter. 

OpenID Provider Configuration Information:
GET /.well-known/openid-configuration
request: host
response: a subset of Metadata.



------OpenID Connect Dynamic Registration------
Client Metadata:
redirect_uris: One of these registered Redirection URI values MUST exactly match the redirect_uri parameter value used in each Authorization Request
response_types: default is that the Client will use only the code Response Type
grant_types: authorization_code, implicit, refresh_token
	response_type 		- 		grant_types
	code 				- 		authorization_code
	id_token  			-		implicit
	token id_token 		- 		implicit
	code id_token 		- 		authorization_code, implicit
	code token 			- 		authorization_code, implicit
	code token id_token - 		authorization_code, implicit
application_type: native or web, web must use the https scheme as redirect_uris
contacts
client_name
client_uri
policy_uri
tos_uri: terms of service
subject_type: pairwise and public
token_endpoint_auth_method: options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none
default_max_age 



Client Registration Endpoint:
To support open Dynamic Registration, the Client Registration Endpoint SHOULD accept registration requests without OAuth 2.0 Access Tokens.
These requests MAY be rate-limited or otherwise limited to prevent a denial-of-service attack on the Client Registration Endpoint.
POST /connect/register HTTP/1.1
request: Client Metadata parameters
response: 
client_id 
client_secret
registration_access_token: used at the Client Configuration Endpoint to perform subsequent operations upon the Client registration.
registration_client_uri: Location of the Client Configuration Endpoint 
client_id_issued_at
client_secret_expires_at
registered Metadata: Authorization Server MAY reject or replace any of the Client's requested field values and substitute them with suitable values.

Client Configuration Endpoint:
Client MUST use its Registration Access Token in all calls to this endpoint as an OAuth 2.0 Bearer Token
Read request: GET /connect/register?client_id=s6BhdRkqt3 HTTP/1.1
Read response: registered Metadata about Client
Authorization Server need not include the registration_access_token or registration_client_uri value in this response unless they have been updated.



------OpenID Connect Session Management------
monitor the End-User's login status at the OpenID Provider on an ongoing basis so that the Relying Party can log out an End-User who has logged out of the OpenID Provider.

Discovery Metadata:
check_session_iframe: URL of an OP iframe that supports cross-origin communications for session state information with the RP Client
end_session_endpoint: URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP

When the OP supports session management, it MUST also return the Session State as an additional session_state parameter in the Authentication Response.
session_state

Once the session is established with the Authentication Request and Response, it is desirable to be able to check the login status at the OP without causing network traffic by polling a hidden OP iframe from an RP iframe with an origin restricted postMessage.

RP iframe:
postMessage from the RP iframe: client_id + " " + session_state
The received data will either be "changed" or "unchanged" unless the syntax of the message sent was determined by the OP to be malformed, in which case the received data will be "error".
When the RP detects a session state change, it SHOULD first try a prompt=none request within an iframe to obtain a new ID Token and session state, sending the old ID Token as the id_token_hint.
If the RP receives an ID token for the same End-User, it SHOULD simply update the value of the session state.
If it doesn't receive an ID token or receives an ID token for another End-User, then it needs to handle this case as a logout for the original End-User.

OP iframe:

RP-Initiated Logout:
the RP, after having logged the End-User out of the RP, redirects the End-User's User Agent to the OP's logout endpoint URL.
This URL is normally obtained via the end_session_endpoint element of the OP's Discovery response
query parameters:
id_token_hint
post_logout_redirect_uri
state





